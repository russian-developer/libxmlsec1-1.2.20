<refentry id="xmlsec-app">
<refmeta>
<refentrytitle role="top_of_page" id="xmlsec-app.top_of_page">app</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>app</refname>
<refpurpose>Crypto-engine independent application support function.</refpurpose>
</refnamediv>

<refsynopsisdiv id="xmlsec-app.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
<link linkend="int">int</link>                 <link linkend="xmlSecCryptoInit">xmlSecCryptoInit</link>                    (void);
<link linkend="int">int</link>                 <link linkend="xmlSecCryptoShutdown">xmlSecCryptoShutdown</link>                (void);
<link linkend="int">int</link>                 <link linkend="xmlSecCryptoKeysMngrInit">xmlSecCryptoKeysMngrInit</link>            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr);
#define             <link linkend="xmlSecKeyDataAesId">xmlSecKeyDataAesId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link>     <link linkend="xmlSecKeyDataAesGetKlass">xmlSecKeyDataAesGetKlass</link>            (void);
#define             <link linkend="xmlSecKeyDataDesId">xmlSecKeyDataDesId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link>     <link linkend="xmlSecKeyDataDesGetKlass">xmlSecKeyDataDesGetKlass</link>            (void);
#define             <link linkend="xmlSecKeyDataDsaId">xmlSecKeyDataDsaId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link>     <link linkend="xmlSecKeyDataDsaGetKlass">xmlSecKeyDataDsaGetKlass</link>            (void);
#define             <link linkend="xmlSecKeyDataEcdsaId">xmlSecKeyDataEcdsaId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link>     <link linkend="xmlSecKeyDataEcdsaGetKlass">xmlSecKeyDataEcdsaGetKlass</link>          (void);
#define             <link linkend="xmlSecKeyDataGost2001Id">xmlSecKeyDataGost2001Id</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link>     <link linkend="xmlSecKeyDataGost2001GetKlass">xmlSecKeyDataGost2001GetKlass</link>       (void);
#define             <link linkend="xmlSecKeyDataHmacId">xmlSecKeyDataHmacId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link>     <link linkend="xmlSecKeyDataHmacGetKlass">xmlSecKeyDataHmacGetKlass</link>           (void);
#define             <link linkend="xmlSecKeyDataRsaId">xmlSecKeyDataRsaId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link>     <link linkend="xmlSecKeyDataRsaGetKlass">xmlSecKeyDataRsaGetKlass</link>            (void);
#define             <link linkend="xmlSecKeyDataX509Id">xmlSecKeyDataX509Id</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link>     <link linkend="xmlSecKeyDataX509GetKlass">xmlSecKeyDataX509GetKlass</link>           (void);
#define             <link linkend="xmlSecKeyDataRawX509CertId">xmlSecKeyDataRawX509CertId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link>     <link linkend="xmlSecKeyDataRawX509CertGetKlass">xmlSecKeyDataRawX509CertGetKlass</link>    (void);
#define             <link linkend="xmlSecX509StoreId">xmlSecX509StoreId</link>
<link linkend="xmlSecKeyDataStoreId">xmlSecKeyDataStoreId</link>  <link linkend="xmlSecX509StoreGetKlass">xmlSecX509StoreGetKlass</link>           (void);
#define             <link linkend="xmlSecTransformAes128CbcId">xmlSecTransformAes128CbcId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformAes128CbcGetKlass">xmlSecTransformAes128CbcGetKlass</link>    (void);
#define             <link linkend="xmlSecTransformAes192CbcId">xmlSecTransformAes192CbcId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformAes192CbcGetKlass">xmlSecTransformAes192CbcGetKlass</link>    (void);
#define             <link linkend="xmlSecTransformAes256CbcId">xmlSecTransformAes256CbcId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformAes256CbcGetKlass">xmlSecTransformAes256CbcGetKlass</link>    (void);
#define             <link linkend="xmlSecTransformKWAes128Id">xmlSecTransformKWAes128Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformKWAes128GetKlass">xmlSecTransformKWAes128GetKlass</link>     (void);
#define             <link linkend="xmlSecTransformKWAes192Id">xmlSecTransformKWAes192Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformKWAes192GetKlass">xmlSecTransformKWAes192GetKlass</link>     (void);
#define             <link linkend="xmlSecTransformKWAes256Id">xmlSecTransformKWAes256Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformKWAes256GetKlass">xmlSecTransformKWAes256GetKlass</link>     (void);
#define             <link linkend="xmlSecTransformDes3CbcId">xmlSecTransformDes3CbcId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformDes3CbcGetKlass">xmlSecTransformDes3CbcGetKlass</link>      (void);
#define             <link linkend="xmlSecTransformKWDes3Id">xmlSecTransformKWDes3Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformKWDes3GetKlass">xmlSecTransformKWDes3GetKlass</link>       (void);
#define             <link linkend="xmlSecTransformDsaSha1Id">xmlSecTransformDsaSha1Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformDsaSha1GetKlass">xmlSecTransformDsaSha1GetKlass</link>      (void);
#define             <link linkend="xmlSecTransformDsaSha256Id">xmlSecTransformDsaSha256Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformDsaSha256GetKlass">xmlSecTransformDsaSha256GetKlass</link>    (void);
#define             <link linkend="xmlSecTransformEcdsaSha1Id">xmlSecTransformEcdsaSha1Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformEcdsaSha1GetKlass">xmlSecTransformEcdsaSha1GetKlass</link>    (void);
#define             <link linkend="xmlSecTransformEcdsaSha224Id">xmlSecTransformEcdsaSha224Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformEcdsaSha224GetKlass">xmlSecTransformEcdsaSha224GetKlass</link>  (void);
#define             <link linkend="xmlSecTransformEcdsaSha256Id">xmlSecTransformEcdsaSha256Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformEcdsaSha256GetKlass">xmlSecTransformEcdsaSha256GetKlass</link>  (void);
#define             <link linkend="xmlSecTransformEcdsaSha384Id">xmlSecTransformEcdsaSha384Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformEcdsaSha384GetKlass">xmlSecTransformEcdsaSha384GetKlass</link>  (void);
#define             <link linkend="xmlSecTransformEcdsaSha512Id">xmlSecTransformEcdsaSha512Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformEcdsaSha512GetKlass">xmlSecTransformEcdsaSha512GetKlass</link>  (void);
#define             <link linkend="xmlSecTransformGost2001GostR3411-94Id">xmlSecTransformGost2001GostR3411_94Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformGost2001GostR3411-94GetKlass">xmlSecTransformGost2001GostR3411_94GetKlass</link>
                                                        (void);
#define             <link linkend="xmlSecTransformHmacMd5Id">xmlSecTransformHmacMd5Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformHmacMd5GetKlass">xmlSecTransformHmacMd5GetKlass</link>      (void);
#define             <link linkend="xmlSecTransformHmacRipemd160Id">xmlSecTransformHmacRipemd160Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformHmacRipemd160GetKlass">xmlSecTransformHmacRipemd160GetKlass</link>
                                                        (void);
#define             <link linkend="xmlSecTransformHmacSha1Id">xmlSecTransformHmacSha1Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformHmacSha1GetKlass">xmlSecTransformHmacSha1GetKlass</link>     (void);
#define             <link linkend="xmlSecTransformHmacSha224Id">xmlSecTransformHmacSha224Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformHmacSha224GetKlass">xmlSecTransformHmacSha224GetKlass</link>   (void);
#define             <link linkend="xmlSecTransformHmacSha256Id">xmlSecTransformHmacSha256Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformHmacSha256GetKlass">xmlSecTransformHmacSha256GetKlass</link>   (void);
#define             <link linkend="xmlSecTransformHmacSha384Id">xmlSecTransformHmacSha384Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformHmacSha384GetKlass">xmlSecTransformHmacSha384GetKlass</link>   (void);
#define             <link linkend="xmlSecTransformHmacSha512Id">xmlSecTransformHmacSha512Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformHmacSha512GetKlass">xmlSecTransformHmacSha512GetKlass</link>   (void);
#define             <link linkend="xmlSecTransformMd5Id">xmlSecTransformMd5Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformMd5GetKlass">xmlSecTransformMd5GetKlass</link>          (void);
#define             <link linkend="xmlSecTransformRipemd160Id">xmlSecTransformRipemd160Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformRipemd160GetKlass">xmlSecTransformRipemd160GetKlass</link>    (void);
#define             <link linkend="xmlSecTransformRsaMd5Id">xmlSecTransformRsaMd5Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformRsaMd5GetKlass">xmlSecTransformRsaMd5GetKlass</link>       (void);
#define             <link linkend="xmlSecTransformRsaRipemd160Id">xmlSecTransformRsaRipemd160Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformRsaRipemd160GetKlass">xmlSecTransformRsaRipemd160GetKlass</link> (void);
#define             <link linkend="xmlSecTransformRsaSha1Id">xmlSecTransformRsaSha1Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformRsaSha1GetKlass">xmlSecTransformRsaSha1GetKlass</link>      (void);
#define             <link linkend="xmlSecTransformRsaSha224Id">xmlSecTransformRsaSha224Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformRsaSha224GetKlass">xmlSecTransformRsaSha224GetKlass</link>    (void);
#define             <link linkend="xmlSecTransformRsaSha256Id">xmlSecTransformRsaSha256Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformRsaSha256GetKlass">xmlSecTransformRsaSha256GetKlass</link>    (void);
#define             <link linkend="xmlSecTransformRsaSha384Id">xmlSecTransformRsaSha384Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformRsaSha384GetKlass">xmlSecTransformRsaSha384GetKlass</link>    (void);
#define             <link linkend="xmlSecTransformRsaSha512Id">xmlSecTransformRsaSha512Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformRsaSha512GetKlass">xmlSecTransformRsaSha512GetKlass</link>    (void);
#define             <link linkend="xmlSecTransformRsaPkcs1Id">xmlSecTransformRsaPkcs1Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformRsaPkcs1GetKlass">xmlSecTransformRsaPkcs1GetKlass</link>     (void);
#define             <link linkend="xmlSecTransformRsaOaepId">xmlSecTransformRsaOaepId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformRsaOaepGetKlass">xmlSecTransformRsaOaepGetKlass</link>      (void);
#define             <link linkend="xmlSecTransformGostR3411-94Id">xmlSecTransformGostR3411_94Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformGostR3411-94GetKlass">xmlSecTransformGostR3411_94GetKlass</link> (void);
#define             <link linkend="xmlSecTransformSha1Id">xmlSecTransformSha1Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformSha1GetKlass">xmlSecTransformSha1GetKlass</link>         (void);
#define             <link linkend="xmlSecTransformSha224Id">xmlSecTransformSha224Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformSha224GetKlass">xmlSecTransformSha224GetKlass</link>       (void);
#define             <link linkend="xmlSecTransformSha256Id">xmlSecTransformSha256Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformSha256GetKlass">xmlSecTransformSha256GetKlass</link>       (void);
#define             <link linkend="xmlSecTransformSha384Id">xmlSecTransformSha384Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformSha384GetKlass">xmlSecTransformSha384GetKlass</link>       (void);
#define             <link linkend="xmlSecTransformSha512Id">xmlSecTransformSha512Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link>   <link linkend="xmlSecTransformSha512GetKlass">xmlSecTransformSha512GetKlass</link>       (void);
<link linkend="int">int</link>                 <link linkend="xmlSecCryptoAppInit">xmlSecCryptoAppInit</link>                 (const <link linkend="char">char</link> *config);
<link linkend="int">int</link>                 <link linkend="xmlSecCryptoAppShutdown">xmlSecCryptoAppShutdown</link>             (void);
<link linkend="int">int</link>                 <link linkend="xmlSecCryptoAppDefaultKeysMngrInit">xmlSecCryptoAppDefaultKeysMngrInit</link>  (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr);
<link linkend="int">int</link>                 <link linkend="xmlSecCryptoAppDefaultKeysMngrAdoptKey">xmlSecCryptoAppDefaultKeysMngrAdoptKey</link>
                                                        (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                                         <link linkend="xmlSecKey">xmlSecKeyPtr</link> key);
<link linkend="int">int</link>                 <link linkend="xmlSecCryptoAppDefaultKeysMngrLoad">xmlSecCryptoAppDefaultKeysMngrLoad</link>  (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                                         const <link linkend="char">char</link> *uri);
<link linkend="int">int</link>                 <link linkend="xmlSecCryptoAppDefaultKeysMngrSave">xmlSecCryptoAppDefaultKeysMngrSave</link>  (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                                         const <link linkend="char">char</link> *filename,
                                                         <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);
<link linkend="int">int</link>                 <link linkend="xmlSecCryptoAppKeysMngrCertLoad">xmlSecCryptoAppKeysMngrCertLoad</link>     (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                                         const <link linkend="char">char</link> *filename,
                                                         <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                                         <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);
<link linkend="int">int</link>                 <link linkend="xmlSecCryptoAppKeysMngrCertLoadMemory">xmlSecCryptoAppKeysMngrCertLoadMemory</link>
                                                        (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                                         const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                                         <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                                         <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                                         <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);
<link linkend="xmlSecKey">xmlSecKeyPtr</link>        <link linkend="xmlSecCryptoAppKeyLoad">xmlSecCryptoAppKeyLoad</link>              (const <link linkend="char">char</link> *filename,
                                                         <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                                         const <link linkend="char">char</link> *pwd,
                                                         <link linkend="void">void</link> *pwdCallback,
                                                         <link linkend="void">void</link> *pwdCallbackCtx);
<link linkend="xmlSecKey">xmlSecKeyPtr</link>        <link linkend="xmlSecCryptoAppKeyLoadMemory">xmlSecCryptoAppKeyLoadMemory</link>        (const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                                         <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                                         <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                                         const <link linkend="char">char</link> *pwd,
                                                         <link linkend="void">void</link> *pwdCallback,
                                                         <link linkend="void">void</link> *pwdCallbackCtx);
<link linkend="xmlSecKey">xmlSecKeyPtr</link>        <link linkend="xmlSecCryptoAppPkcs12Load">xmlSecCryptoAppPkcs12Load</link>           (const <link linkend="char">char</link> *filename,
                                                         const <link linkend="char">char</link> *pwd,
                                                         <link linkend="void">void</link> *pwdCallback,
                                                         <link linkend="void">void</link> *pwdCallbackCtx);
<link linkend="xmlSecKey">xmlSecKeyPtr</link>        <link linkend="xmlSecCryptoAppPkcs12LoadMemory">xmlSecCryptoAppPkcs12LoadMemory</link>     (const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                                         <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                                         const <link linkend="char">char</link> *pwd,
                                                         <link linkend="void">void</link> *pwdCallback,
                                                         <link linkend="void">void</link> *pwdCallbackCtx);
<link linkend="int">int</link>                 <link linkend="xmlSecCryptoAppKeyCertLoad">xmlSecCryptoAppKeyCertLoad</link>          (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                                         const <link linkend="char">char</link> *filename,
                                                         <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format);
<link linkend="int">int</link>                 <link linkend="xmlSecCryptoAppKeyCertLoadMemory">xmlSecCryptoAppKeyCertLoadMemory</link>    (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                                         const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                                         <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                                         <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format);
<link linkend="void">void</link>*               <link linkend="xmlSecCryptoAppGetDefaultPwdCallback">xmlSecCryptoAppGetDefaultPwdCallback</link>
                                                        (void);
</synopsis>
</refsynopsisdiv>









<refsect1 id="xmlsec-app.description" role="desc">
<title role="desc.title">Description</title>
<para>
Crypto-engine application support function used by xmlsec command line utility.
</para>
</refsect1>

<refsect1 id="xmlsec-app.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="xmlSecCryptoInit" role="function">
<title>xmlSecCryptoInit ()</title>
<indexterm zone="xmlSecCryptoInit"><primary sortas="xmlSecCryptoInit">xmlSecCryptoInit</primary></indexterm><programlisting><link linkend="int">int</link>                 xmlSecCryptoInit                    (void);</programlisting>
<para>
XMLSec library specific crypto engine initialization.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecCryptoShutdown" role="function">
<title>xmlSecCryptoShutdown ()</title>
<indexterm zone="xmlSecCryptoShutdown"><primary sortas="xmlSecCryptoShutdown">xmlSecCryptoShutdown</primary></indexterm><programlisting><link linkend="int">int</link>                 xmlSecCryptoShutdown                (void);</programlisting>
<para>
XMLSec library specific crypto engine shutdown.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecCryptoKeysMngrInit" role="function">
<title>xmlSecCryptoKeysMngrInit ()</title>
<indexterm zone="xmlSecCryptoKeysMngrInit"><primary sortas="xmlSecCryptoKeysMngrInit">xmlSecCryptoKeysMngrInit</primary></indexterm><programlisting><link linkend="int">int</link>                 xmlSecCryptoKeysMngrInit            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr);</programlisting>
<para>
Adds crypto specific key data stores in keys manager.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&#160;:</term>
<listitem><simpara>               the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataAesId" role="macro">
<title>xmlSecKeyDataAesId</title>
<indexterm zone="xmlSecKeyDataAesId"><primary sortas="xmlSecKeyDataAesId">xmlSecKeyDataAesId</primary></indexterm><programlisting>#define xmlSecKeyDataAesId                      xmlSecKeyDataAesGetKlass()
</programlisting>
<para>
The AES key klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecKeyDataAesGetKlass" role="function">
<title>xmlSecKeyDataAesGetKlass ()</title>
<indexterm zone="xmlSecKeyDataAesGetKlass"><primary sortas="xmlSecKeyDataAesGetKlass">xmlSecKeyDataAesGetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link>     xmlSecKeyDataAesGetKlass            (void);</programlisting>
<para>
The AES key data klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> AES key data klass or NULL if an error occurs
(xmlsec-crypto library is not loaded or the AES key data
klass is not implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataDesId" role="macro">
<title>xmlSecKeyDataDesId</title>
<indexterm zone="xmlSecKeyDataDesId"><primary sortas="xmlSecKeyDataDesId">xmlSecKeyDataDesId</primary></indexterm><programlisting>#define xmlSecKeyDataDesId                      xmlSecKeyDataDesGetKlass()
</programlisting>
<para>
The DES key klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecKeyDataDesGetKlass" role="function">
<title>xmlSecKeyDataDesGetKlass ()</title>
<indexterm zone="xmlSecKeyDataDesGetKlass"><primary sortas="xmlSecKeyDataDesGetKlass">xmlSecKeyDataDesGetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link>     xmlSecKeyDataDesGetKlass            (void);</programlisting>
<para>
The DES key data klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> DES key data klass or NULL if an error occurs
(xmlsec-crypto library is not loaded or the DES key data
klass is not implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataDsaId" role="macro">
<title>xmlSecKeyDataDsaId</title>
<indexterm zone="xmlSecKeyDataDsaId"><primary sortas="xmlSecKeyDataDsaId">xmlSecKeyDataDsaId</primary></indexterm><programlisting>#define xmlSecKeyDataDsaId                      xmlSecKeyDataDsaGetKlass()
</programlisting>
<para>
The DSA key klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecKeyDataDsaGetKlass" role="function">
<title>xmlSecKeyDataDsaGetKlass ()</title>
<indexterm zone="xmlSecKeyDataDsaGetKlass"><primary sortas="xmlSecKeyDataDsaGetKlass">xmlSecKeyDataDsaGetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link>     xmlSecKeyDataDsaGetKlass            (void);</programlisting>
<para>
The DSA key data klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> DSA key data klass or NULL if an error occurs
(xmlsec-crypto library is not loaded or the DSA key data
klass is not implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataEcdsaId" role="macro">
<title>xmlSecKeyDataEcdsaId</title>
<indexterm zone="xmlSecKeyDataEcdsaId"><primary sortas="xmlSecKeyDataEcdsaId">xmlSecKeyDataEcdsaId</primary></indexterm><programlisting>#define xmlSecKeyDataEcdsaId                    xmlSecKeyDataEcdsaGetKlass()
</programlisting>
<para>
The ECDSA key klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecKeyDataEcdsaGetKlass" role="function">
<title>xmlSecKeyDataEcdsaGetKlass ()</title>
<indexterm zone="xmlSecKeyDataEcdsaGetKlass"><primary sortas="xmlSecKeyDataEcdsaGetKlass">xmlSecKeyDataEcdsaGetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link>     xmlSecKeyDataEcdsaGetKlass          (void);</programlisting>
<para>
The ECDSA key data klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> ECDSA key data klass or NULL if an error occurs
(xmlsec-crypto library is not loaded or the ECDSA key data
klass is not implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataGost2001Id" role="macro">
<title>xmlSecKeyDataGost2001Id</title>
<indexterm zone="xmlSecKeyDataGost2001Id"><primary sortas="xmlSecKeyDataGost2001Id">xmlSecKeyDataGost2001Id</primary></indexterm><programlisting>#define xmlSecKeyDataGost2001Id                 xmlSecKeyDataGost2001GetKlass()
</programlisting>
<para>
The GOST2001 key klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecKeyDataGost2001GetKlass" role="function">
<title>xmlSecKeyDataGost2001GetKlass ()</title>
<indexterm zone="xmlSecKeyDataGost2001GetKlass"><primary sortas="xmlSecKeyDataGost2001GetKlass">xmlSecKeyDataGost2001GetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link>     xmlSecKeyDataGost2001GetKlass       (void);</programlisting>
<para>
The GOST2001 key data klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> GOST2001 key data klass or NULL if an error occurs
(xmlsec-crypto library is not loaded or the GOST2001 key data
klass is not implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataHmacId" role="macro">
<title>xmlSecKeyDataHmacId</title>
<indexterm zone="xmlSecKeyDataHmacId"><primary sortas="xmlSecKeyDataHmacId">xmlSecKeyDataHmacId</primary></indexterm><programlisting>#define xmlSecKeyDataHmacId                     xmlSecKeyDataHmacGetKlass()
</programlisting>
<para>
The DHMAC key klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecKeyDataHmacGetKlass" role="function">
<title>xmlSecKeyDataHmacGetKlass ()</title>
<indexterm zone="xmlSecKeyDataHmacGetKlass"><primary sortas="xmlSecKeyDataHmacGetKlass">xmlSecKeyDataHmacGetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link>     xmlSecKeyDataHmacGetKlass           (void);</programlisting>
<para>
The HMAC key data klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> HMAC key data klass or NULL if an error occurs
(xmlsec-crypto library is not loaded or the HMAC key data
klass is not implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataRsaId" role="macro">
<title>xmlSecKeyDataRsaId</title>
<indexterm zone="xmlSecKeyDataRsaId"><primary sortas="xmlSecKeyDataRsaId">xmlSecKeyDataRsaId</primary></indexterm><programlisting>#define xmlSecKeyDataRsaId                      xmlSecKeyDataRsaGetKlass()
</programlisting>
<para>
The RSA key klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecKeyDataRsaGetKlass" role="function">
<title>xmlSecKeyDataRsaGetKlass ()</title>
<indexterm zone="xmlSecKeyDataRsaGetKlass"><primary sortas="xmlSecKeyDataRsaGetKlass">xmlSecKeyDataRsaGetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link>     xmlSecKeyDataRsaGetKlass            (void);</programlisting>
<para>
The RSA key data klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> RSA key data klass or NULL if an error occurs
(xmlsec-crypto library is not loaded or the RSA key data
klass is not implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataX509Id" role="macro">
<title>xmlSecKeyDataX509Id</title>
<indexterm zone="xmlSecKeyDataX509Id"><primary sortas="xmlSecKeyDataX509Id">xmlSecKeyDataX509Id</primary></indexterm><programlisting>#define xmlSecKeyDataX509Id                     xmlSecKeyDataX509GetKlass()
</programlisting>
<para>
The X509 data klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecKeyDataX509GetKlass" role="function">
<title>xmlSecKeyDataX509GetKlass ()</title>
<indexterm zone="xmlSecKeyDataX509GetKlass"><primary sortas="xmlSecKeyDataX509GetKlass">xmlSecKeyDataX509GetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link>     xmlSecKeyDataX509GetKlass           (void);</programlisting>
<para>
The X509 key data klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> X509 key data klass or NULL if an error occurs
(xmlsec-crypto library is not loaded or the X509 key data
klass is not implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataRawX509CertId" role="macro">
<title>xmlSecKeyDataRawX509CertId</title>
<indexterm zone="xmlSecKeyDataRawX509CertId"><primary sortas="xmlSecKeyDataRawX509CertId">xmlSecKeyDataRawX509CertId</primary></indexterm><programlisting>#define xmlSecKeyDataRawX509CertId              xmlSecKeyDataRawX509CertGetKlass()
</programlisting>
<para>
The  raw X509 certificate klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecKeyDataRawX509CertGetKlass" role="function">
<title>xmlSecKeyDataRawX509CertGetKlass ()</title>
<indexterm zone="xmlSecKeyDataRawX509CertGetKlass"><primary sortas="xmlSecKeyDataRawX509CertGetKlass">xmlSecKeyDataRawX509CertGetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link>     xmlSecKeyDataRawX509CertGetKlass    (void);</programlisting>
<para>
The raw X509 cert key data klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> raw x509 cert key data klass or NULL if an error occurs
(xmlsec-crypto library is not loaded or the raw X509 cert key data
klass is not implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecX509StoreId" role="macro">
<title>xmlSecX509StoreId</title>
<indexterm zone="xmlSecX509StoreId"><primary sortas="xmlSecX509StoreId">xmlSecX509StoreId</primary></indexterm><programlisting>#define xmlSecX509StoreId                       xmlSecX509StoreGetKlass()
</programlisting>
<para>
The  X509 store klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecX509StoreGetKlass" role="function">
<title>xmlSecX509StoreGetKlass ()</title>
<indexterm zone="xmlSecX509StoreGetKlass"><primary sortas="xmlSecX509StoreGetKlass">xmlSecX509StoreGetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataStoreId">xmlSecKeyDataStoreId</link>  xmlSecX509StoreGetKlass           (void);</programlisting>
<para>
The X509 certificates key data store klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to X509 certificates key data store klass or NULL if
an error occurs (xmlsec-crypto library is not loaded or the raw X509
cert key data klass is not implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformAes128CbcId" role="macro">
<title>xmlSecTransformAes128CbcId</title>
<indexterm zone="xmlSecTransformAes128CbcId"><primary sortas="xmlSecTransformAes128CbcId">xmlSecTransformAes128CbcId</primary></indexterm><programlisting>#define xmlSecTransformAes128CbcId              xmlSecTransformAes128CbcGetKlass()
</programlisting>
<para>
The AES128 CBC cipher transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformAes128CbcGetKlass" role="function">
<title>xmlSecTransformAes128CbcGetKlass ()</title>
<indexterm zone="xmlSecTransformAes128CbcGetKlass"><primary sortas="xmlSecTransformAes128CbcGetKlass">xmlSecTransformAes128CbcGetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformAes128CbcGetKlass    (void);</programlisting>
<para>
AES 128 CBC encryption transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to AES 128 CBC encryption transform or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformAes192CbcId" role="macro">
<title>xmlSecTransformAes192CbcId</title>
<indexterm zone="xmlSecTransformAes192CbcId"><primary sortas="xmlSecTransformAes192CbcId">xmlSecTransformAes192CbcId</primary></indexterm><programlisting>#define xmlSecTransformAes192CbcId              xmlSecTransformAes192CbcGetKlass()
</programlisting>
<para>
The AES192 CBC cipher transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformAes192CbcGetKlass" role="function">
<title>xmlSecTransformAes192CbcGetKlass ()</title>
<indexterm zone="xmlSecTransformAes192CbcGetKlass"><primary sortas="xmlSecTransformAes192CbcGetKlass">xmlSecTransformAes192CbcGetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformAes192CbcGetKlass    (void);</programlisting>
<para>
AES 192 CBC encryption transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to AES 192 CBC encryption transform or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformAes256CbcId" role="macro">
<title>xmlSecTransformAes256CbcId</title>
<indexterm zone="xmlSecTransformAes256CbcId"><primary sortas="xmlSecTransformAes256CbcId">xmlSecTransformAes256CbcId</primary></indexterm><programlisting>#define xmlSecTransformAes256CbcId              xmlSecTransformAes256CbcGetKlass()
</programlisting>
<para>
The AES256 CBC cipher transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformAes256CbcGetKlass" role="function">
<title>xmlSecTransformAes256CbcGetKlass ()</title>
<indexterm zone="xmlSecTransformAes256CbcGetKlass"><primary sortas="xmlSecTransformAes256CbcGetKlass">xmlSecTransformAes256CbcGetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformAes256CbcGetKlass    (void);</programlisting>
<para>
AES 256 CBC encryption transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to AES 256 CBC encryption transform or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformKWAes128Id" role="macro">
<title>xmlSecTransformKWAes128Id</title>
<indexterm zone="xmlSecTransformKWAes128Id"><primary sortas="xmlSecTransformKWAes128Id">xmlSecTransformKWAes128Id</primary></indexterm><programlisting>#define xmlSecTransformKWAes128Id               xmlSecTransformKWAes128GetKlass()
</programlisting>
<para>
The AES 128 key wrap transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformKWAes128GetKlass" role="function">
<title>xmlSecTransformKWAes128GetKlass ()</title>
<indexterm zone="xmlSecTransformKWAes128GetKlass"><primary sortas="xmlSecTransformKWAes128GetKlass">xmlSecTransformKWAes128GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformKWAes128GetKlass     (void);</programlisting>
<para>
The AES-128 kew wrapper transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> AES-128 kew wrapper transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformKWAes192Id" role="macro">
<title>xmlSecTransformKWAes192Id</title>
<indexterm zone="xmlSecTransformKWAes192Id"><primary sortas="xmlSecTransformKWAes192Id">xmlSecTransformKWAes192Id</primary></indexterm><programlisting>#define xmlSecTransformKWAes192Id               xmlSecTransformKWAes192GetKlass()
</programlisting>
<para>
The AES 192 key wrap transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformKWAes192GetKlass" role="function">
<title>xmlSecTransformKWAes192GetKlass ()</title>
<indexterm zone="xmlSecTransformKWAes192GetKlass"><primary sortas="xmlSecTransformKWAes192GetKlass">xmlSecTransformKWAes192GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformKWAes192GetKlass     (void);</programlisting>
<para>
The AES-192 kew wrapper transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> AES-192 kew wrapper transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformKWAes256Id" role="macro">
<title>xmlSecTransformKWAes256Id</title>
<indexterm zone="xmlSecTransformKWAes256Id"><primary sortas="xmlSecTransformKWAes256Id">xmlSecTransformKWAes256Id</primary></indexterm><programlisting>#define xmlSecTransformKWAes256Id               xmlSecTransformKWAes256GetKlass()
</programlisting>
<para>
The AES 256 key wrap transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformKWAes256GetKlass" role="function">
<title>xmlSecTransformKWAes256GetKlass ()</title>
<indexterm zone="xmlSecTransformKWAes256GetKlass"><primary sortas="xmlSecTransformKWAes256GetKlass">xmlSecTransformKWAes256GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformKWAes256GetKlass     (void);</programlisting>
<para>
The AES-256 kew wrapper transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> AES-256 kew wrapper transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformDes3CbcId" role="macro">
<title>xmlSecTransformDes3CbcId</title>
<indexterm zone="xmlSecTransformDes3CbcId"><primary sortas="xmlSecTransformDes3CbcId">xmlSecTransformDes3CbcId</primary></indexterm><programlisting>#define xmlSecTransformDes3CbcId                xmlSecTransformDes3CbcGetKlass()
</programlisting>
<para>
The Triple DES encryption transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformDes3CbcGetKlass" role="function">
<title>xmlSecTransformDes3CbcGetKlass ()</title>
<indexterm zone="xmlSecTransformDes3CbcGetKlass"><primary sortas="xmlSecTransformDes3CbcGetKlass">xmlSecTransformDes3CbcGetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformDes3CbcGetKlass      (void);</programlisting>
<para>
Triple DES CBC encryption transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to Triple DES encryption transform or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformKWDes3Id" role="macro">
<title>xmlSecTransformKWDes3Id</title>
<indexterm zone="xmlSecTransformKWDes3Id"><primary sortas="xmlSecTransformKWDes3Id">xmlSecTransformKWDes3Id</primary></indexterm><programlisting>#define xmlSecTransformKWDes3Id                 xmlSecTransformKWDes3GetKlass()
</programlisting>
<para>
The DES3 CBC cipher transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformKWDes3GetKlass" role="function">
<title>xmlSecTransformKWDes3GetKlass ()</title>
<indexterm zone="xmlSecTransformKWDes3GetKlass"><primary sortas="xmlSecTransformKWDes3GetKlass">xmlSecTransformKWDes3GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformKWDes3GetKlass       (void);</programlisting>
<para>
The Triple DES key wrapper transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Triple DES key wrapper transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformDsaSha1Id" role="macro">
<title>xmlSecTransformDsaSha1Id</title>
<indexterm zone="xmlSecTransformDsaSha1Id"><primary sortas="xmlSecTransformDsaSha1Id">xmlSecTransformDsaSha1Id</primary></indexterm><programlisting>#define xmlSecTransformDsaSha1Id                xmlSecTransformDsaSha1GetKlass()
</programlisting>
<para>
The DSA-SHA1 signature transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformDsaSha1GetKlass" role="function">
<title>xmlSecTransformDsaSha1GetKlass ()</title>
<indexterm zone="xmlSecTransformDsaSha1GetKlass"><primary sortas="xmlSecTransformDsaSha1GetKlass">xmlSecTransformDsaSha1GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformDsaSha1GetKlass      (void);</programlisting>
<para>
The DSA-SHA1 signature transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> DSA-SHA1 signature transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformDsaSha256Id" role="macro">
<title>xmlSecTransformDsaSha256Id</title>
<indexterm zone="xmlSecTransformDsaSha256Id"><primary sortas="xmlSecTransformDsaSha256Id">xmlSecTransformDsaSha256Id</primary></indexterm><programlisting>#define xmlSecTransformDsaSha256Id              xmlSecTransformDsaSha256GetKlass()
</programlisting>
<para>
The DSA-SHA256 signature transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformDsaSha256GetKlass" role="function">
<title>xmlSecTransformDsaSha256GetKlass ()</title>
<indexterm zone="xmlSecTransformDsaSha256GetKlass"><primary sortas="xmlSecTransformDsaSha256GetKlass">xmlSecTransformDsaSha256GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformDsaSha256GetKlass    (void);</programlisting>
<para>
The DSA-SHA256 signature transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> DSA-SHA256 signature transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformEcdsaSha1Id" role="macro">
<title>xmlSecTransformEcdsaSha1Id</title>
<indexterm zone="xmlSecTransformEcdsaSha1Id"><primary sortas="xmlSecTransformEcdsaSha1Id">xmlSecTransformEcdsaSha1Id</primary></indexterm><programlisting>#define xmlSecTransformEcdsaSha1Id              xmlSecTransformEcdsaSha1GetKlass()
</programlisting>
<para>
The ECDSA-SHA1 signature transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformEcdsaSha1GetKlass" role="function">
<title>xmlSecTransformEcdsaSha1GetKlass ()</title>
<indexterm zone="xmlSecTransformEcdsaSha1GetKlass"><primary sortas="xmlSecTransformEcdsaSha1GetKlass">xmlSecTransformEcdsaSha1GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformEcdsaSha1GetKlass    (void);</programlisting>
<para>
The ECDSA-SHA1 signature transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> ECDSA-SHA1 signature transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformEcdsaSha224Id" role="macro">
<title>xmlSecTransformEcdsaSha224Id</title>
<indexterm zone="xmlSecTransformEcdsaSha224Id"><primary sortas="xmlSecTransformEcdsaSha224Id">xmlSecTransformEcdsaSha224Id</primary></indexterm><programlisting>#define xmlSecTransformEcdsaSha224Id            xmlSecTransformEcdsaSha224GetKlass()
</programlisting>
<para>
The ECDSA-SHA224 signature transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformEcdsaSha224GetKlass" role="function">
<title>xmlSecTransformEcdsaSha224GetKlass ()</title>
<indexterm zone="xmlSecTransformEcdsaSha224GetKlass"><primary sortas="xmlSecTransformEcdsaSha224GetKlass">xmlSecTransformEcdsaSha224GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformEcdsaSha224GetKlass  (void);</programlisting>
<para>
The ECDSA-SHA224 signature transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> ECDSA-SHA224 signature transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformEcdsaSha256Id" role="macro">
<title>xmlSecTransformEcdsaSha256Id</title>
<indexterm zone="xmlSecTransformEcdsaSha256Id"><primary sortas="xmlSecTransformEcdsaSha256Id">xmlSecTransformEcdsaSha256Id</primary></indexterm><programlisting>#define xmlSecTransformEcdsaSha256Id            xmlSecTransformEcdsaSha256GetKlass()
</programlisting>
<para>
The ECDSA-SHA256 signature transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformEcdsaSha256GetKlass" role="function">
<title>xmlSecTransformEcdsaSha256GetKlass ()</title>
<indexterm zone="xmlSecTransformEcdsaSha256GetKlass"><primary sortas="xmlSecTransformEcdsaSha256GetKlass">xmlSecTransformEcdsaSha256GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformEcdsaSha256GetKlass  (void);</programlisting>
<para>
The ECDSA-SHA256 signature transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> ECDSA-SHA256 signature transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformEcdsaSha384Id" role="macro">
<title>xmlSecTransformEcdsaSha384Id</title>
<indexterm zone="xmlSecTransformEcdsaSha384Id"><primary sortas="xmlSecTransformEcdsaSha384Id">xmlSecTransformEcdsaSha384Id</primary></indexterm><programlisting>#define xmlSecTransformEcdsaSha384Id            xmlSecTransformEcdsaSha384GetKlass()
</programlisting>
<para>
The ECDS-SHA384 signature transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformEcdsaSha384GetKlass" role="function">
<title>xmlSecTransformEcdsaSha384GetKlass ()</title>
<indexterm zone="xmlSecTransformEcdsaSha384GetKlass"><primary sortas="xmlSecTransformEcdsaSha384GetKlass">xmlSecTransformEcdsaSha384GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformEcdsaSha384GetKlass  (void);</programlisting>
<para>
The ECDSA-SHA384 signature transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> ECDSA-SHA384 signature transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformEcdsaSha512Id" role="macro">
<title>xmlSecTransformEcdsaSha512Id</title>
<indexterm zone="xmlSecTransformEcdsaSha512Id"><primary sortas="xmlSecTransformEcdsaSha512Id">xmlSecTransformEcdsaSha512Id</primary></indexterm><programlisting>#define xmlSecTransformEcdsaSha512Id            xmlSecTransformEcdsaSha512GetKlass()
</programlisting>
<para>
The ECDSA-SHA512 signature transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformEcdsaSha512GetKlass" role="function">
<title>xmlSecTransformEcdsaSha512GetKlass ()</title>
<indexterm zone="xmlSecTransformEcdsaSha512GetKlass"><primary sortas="xmlSecTransformEcdsaSha512GetKlass">xmlSecTransformEcdsaSha512GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformEcdsaSha512GetKlass  (void);</programlisting>
<para>
The ECDSA-SHA512 signature transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> ECDSA-SHA512 signature transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformGost2001GostR3411-94Id" role="macro">
<title>xmlSecTransformGost2001GostR3411_94Id</title>
<indexterm zone="xmlSecTransformGost2001GostR3411-94Id"><primary sortas="xmlSecTransformGost2001GostR3411_94Id">xmlSecTransformGost2001GostR3411_94Id</primary></indexterm><programlisting>#define xmlSecTransformGost2001GostR3411_94Id           xmlSecTransformGost2001GostR3411_94GetKlass()
</programlisting>
<para>
The GOST2001-GOSTR3411_94 signature transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformGost2001GostR3411-94GetKlass" role="function">
<title>xmlSecTransformGost2001GostR3411_94GetKlass ()</title>
<indexterm zone="xmlSecTransformGost2001GostR3411-94GetKlass"><primary sortas="xmlSecTransformGost2001GostR3411_94GetKlass">xmlSecTransformGost2001GostR3411_94GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformGost2001GostR3411_94GetKlass
                                                        (void);</programlisting>
<para>
The GOST2001-GOSTR3411_94 signature transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> GOST2001-GOSTR3411_94 signature transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformHmacMd5Id" role="macro">
<title>xmlSecTransformHmacMd5Id</title>
<indexterm zone="xmlSecTransformHmacMd5Id"><primary sortas="xmlSecTransformHmacMd5Id">xmlSecTransformHmacMd5Id</primary></indexterm><programlisting>#define xmlSecTransformHmacMd5Id                xmlSecTransformHmacMd5GetKlass()
</programlisting>
<para>
The HMAC with MD5 signature transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformHmacMd5GetKlass" role="function">
<title>xmlSecTransformHmacMd5GetKlass ()</title>
<indexterm zone="xmlSecTransformHmacMd5GetKlass"><primary sortas="xmlSecTransformHmacMd5GetKlass">xmlSecTransformHmacMd5GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformHmacMd5GetKlass      (void);</programlisting>
<para>
The HMAC-MD5 transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the HMAC-MD5 transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformHmacRipemd160Id" role="macro">
<title>xmlSecTransformHmacRipemd160Id</title>
<indexterm zone="xmlSecTransformHmacRipemd160Id"><primary sortas="xmlSecTransformHmacRipemd160Id">xmlSecTransformHmacRipemd160Id</primary></indexterm><programlisting>#define xmlSecTransformHmacRipemd160Id          xmlSecTransformHmacRipemd160GetKlass()
</programlisting>
<para>
The HMAC with RipeMD160 signature transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformHmacRipemd160GetKlass" role="function">
<title>xmlSecTransformHmacRipemd160GetKlass ()</title>
<indexterm zone="xmlSecTransformHmacRipemd160GetKlass"><primary sortas="xmlSecTransformHmacRipemd160GetKlass">xmlSecTransformHmacRipemd160GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformHmacRipemd160GetKlass
                                                        (void);</programlisting>
<para>
The HMAC-RIPEMD160 transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the HMAC-RIPEMD160 transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformHmacSha1Id" role="macro">
<title>xmlSecTransformHmacSha1Id</title>
<indexterm zone="xmlSecTransformHmacSha1Id"><primary sortas="xmlSecTransformHmacSha1Id">xmlSecTransformHmacSha1Id</primary></indexterm><programlisting>#define xmlSecTransformHmacSha1Id               xmlSecTransformHmacSha1GetKlass()
</programlisting>
<para>
The HMAC with SHA1 signature transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformHmacSha1GetKlass" role="function">
<title>xmlSecTransformHmacSha1GetKlass ()</title>
<indexterm zone="xmlSecTransformHmacSha1GetKlass"><primary sortas="xmlSecTransformHmacSha1GetKlass">xmlSecTransformHmacSha1GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformHmacSha1GetKlass     (void);</programlisting>
<para>
The HMAC-SHA1 transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the HMAC-SHA1 transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformHmacSha224Id" role="macro">
<title>xmlSecTransformHmacSha224Id</title>
<indexterm zone="xmlSecTransformHmacSha224Id"><primary sortas="xmlSecTransformHmacSha224Id">xmlSecTransformHmacSha224Id</primary></indexterm><programlisting>#define xmlSecTransformHmacSha224Id             xmlSecTransformHmacSha224GetKlass()
</programlisting>
<para>
The HMAC with SHA224 signature transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformHmacSha224GetKlass" role="function">
<title>xmlSecTransformHmacSha224GetKlass ()</title>
<indexterm zone="xmlSecTransformHmacSha224GetKlass"><primary sortas="xmlSecTransformHmacSha224GetKlass">xmlSecTransformHmacSha224GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformHmacSha224GetKlass   (void);</programlisting>
<para>
The HMAC-SHA224 transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the HMAC-SHA224 transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformHmacSha256Id" role="macro">
<title>xmlSecTransformHmacSha256Id</title>
<indexterm zone="xmlSecTransformHmacSha256Id"><primary sortas="xmlSecTransformHmacSha256Id">xmlSecTransformHmacSha256Id</primary></indexterm><programlisting>#define xmlSecTransformHmacSha256Id             xmlSecTransformHmacSha256GetKlass()
</programlisting>
<para>
The HMAC with SHA256 signature transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformHmacSha256GetKlass" role="function">
<title>xmlSecTransformHmacSha256GetKlass ()</title>
<indexterm zone="xmlSecTransformHmacSha256GetKlass"><primary sortas="xmlSecTransformHmacSha256GetKlass">xmlSecTransformHmacSha256GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformHmacSha256GetKlass   (void);</programlisting>
<para>
The HMAC-SHA256 transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the HMAC-SHA256 transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformHmacSha384Id" role="macro">
<title>xmlSecTransformHmacSha384Id</title>
<indexterm zone="xmlSecTransformHmacSha384Id"><primary sortas="xmlSecTransformHmacSha384Id">xmlSecTransformHmacSha384Id</primary></indexterm><programlisting>#define xmlSecTransformHmacSha384Id             xmlSecTransformHmacSha384GetKlass()
</programlisting>
<para>
The HMAC with SHA384 signature transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformHmacSha384GetKlass" role="function">
<title>xmlSecTransformHmacSha384GetKlass ()</title>
<indexterm zone="xmlSecTransformHmacSha384GetKlass"><primary sortas="xmlSecTransformHmacSha384GetKlass">xmlSecTransformHmacSha384GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformHmacSha384GetKlass   (void);</programlisting>
<para>
The HMAC-SHA384 transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the HMAC-SHA384 transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformHmacSha512Id" role="macro">
<title>xmlSecTransformHmacSha512Id</title>
<indexterm zone="xmlSecTransformHmacSha512Id"><primary sortas="xmlSecTransformHmacSha512Id">xmlSecTransformHmacSha512Id</primary></indexterm><programlisting>#define xmlSecTransformHmacSha512Id             xmlSecTransformHmacSha512GetKlass()
</programlisting>
<para>
The HMAC with SHA512 signature transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformHmacSha512GetKlass" role="function">
<title>xmlSecTransformHmacSha512GetKlass ()</title>
<indexterm zone="xmlSecTransformHmacSha512GetKlass"><primary sortas="xmlSecTransformHmacSha512GetKlass">xmlSecTransformHmacSha512GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformHmacSha512GetKlass   (void);</programlisting>
<para>
The HMAC-SHA512 transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the HMAC-SHA512 transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformMd5Id" role="macro">
<title>xmlSecTransformMd5Id</title>
<indexterm zone="xmlSecTransformMd5Id"><primary sortas="xmlSecTransformMd5Id">xmlSecTransformMd5Id</primary></indexterm><programlisting>#define xmlSecTransformMd5Id                    xmlSecTransformMd5GetKlass()
</programlisting>
<para>
The MD5 digest transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformMd5GetKlass" role="function">
<title>xmlSecTransformMd5GetKlass ()</title>
<indexterm zone="xmlSecTransformMd5GetKlass"><primary sortas="xmlSecTransformMd5GetKlass">xmlSecTransformMd5GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformMd5GetKlass          (void);</programlisting>
<para>
MD5 digest transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to MD5 digest transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformRipemd160Id" role="macro">
<title>xmlSecTransformRipemd160Id</title>
<indexterm zone="xmlSecTransformRipemd160Id"><primary sortas="xmlSecTransformRipemd160Id">xmlSecTransformRipemd160Id</primary></indexterm><programlisting>#define xmlSecTransformRipemd160Id              xmlSecTransformRipemd160GetKlass()
</programlisting>
<para>
The RIPEMD160 digest transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformRipemd160GetKlass" role="function">
<title>xmlSecTransformRipemd160GetKlass ()</title>
<indexterm zone="xmlSecTransformRipemd160GetKlass"><primary sortas="xmlSecTransformRipemd160GetKlass">xmlSecTransformRipemd160GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformRipemd160GetKlass    (void);</programlisting>
<para>
RIPEMD-160 digest transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to RIPEMD-160 digest transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformRsaMd5Id" role="macro">
<title>xmlSecTransformRsaMd5Id</title>
<indexterm zone="xmlSecTransformRsaMd5Id"><primary sortas="xmlSecTransformRsaMd5Id">xmlSecTransformRsaMd5Id</primary></indexterm><programlisting>#define xmlSecTransformRsaMd5Id                 xmlSecTransformRsaMd5GetKlass()
</programlisting>
<para>
The RSA-MD5 signature transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformRsaMd5GetKlass" role="function">
<title>xmlSecTransformRsaMd5GetKlass ()</title>
<indexterm zone="xmlSecTransformRsaMd5GetKlass"><primary sortas="xmlSecTransformRsaMd5GetKlass">xmlSecTransformRsaMd5GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformRsaMd5GetKlass       (void);</programlisting>
<para>
The RSA-MD5 signature transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> RSA-MD5 signature transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformRsaRipemd160Id" role="macro">
<title>xmlSecTransformRsaRipemd160Id</title>
<indexterm zone="xmlSecTransformRsaRipemd160Id"><primary sortas="xmlSecTransformRsaRipemd160Id">xmlSecTransformRsaRipemd160Id</primary></indexterm><programlisting>#define xmlSecTransformRsaRipemd160Id           xmlSecTransformRsaRipemd160GetKlass()
</programlisting>
<para>
The RSA-RIPEMD160 signature transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformRsaRipemd160GetKlass" role="function">
<title>xmlSecTransformRsaRipemd160GetKlass ()</title>
<indexterm zone="xmlSecTransformRsaRipemd160GetKlass"><primary sortas="xmlSecTransformRsaRipemd160GetKlass">xmlSecTransformRsaRipemd160GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformRsaRipemd160GetKlass (void);</programlisting>
<para>
The RSA-RIPEMD160 signature transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> RSA-RIPEMD160 signature transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformRsaSha1Id" role="macro">
<title>xmlSecTransformRsaSha1Id</title>
<indexterm zone="xmlSecTransformRsaSha1Id"><primary sortas="xmlSecTransformRsaSha1Id">xmlSecTransformRsaSha1Id</primary></indexterm><programlisting>#define xmlSecTransformRsaSha1Id                xmlSecTransformRsaSha1GetKlass()
</programlisting>
<para>
The RSA-SHA1 signature transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformRsaSha1GetKlass" role="function">
<title>xmlSecTransformRsaSha1GetKlass ()</title>
<indexterm zone="xmlSecTransformRsaSha1GetKlass"><primary sortas="xmlSecTransformRsaSha1GetKlass">xmlSecTransformRsaSha1GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformRsaSha1GetKlass      (void);</programlisting>
<para>
The RSA-SHA1 signature transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> RSA-SHA1 signature transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformRsaSha224Id" role="macro">
<title>xmlSecTransformRsaSha224Id</title>
<indexterm zone="xmlSecTransformRsaSha224Id"><primary sortas="xmlSecTransformRsaSha224Id">xmlSecTransformRsaSha224Id</primary></indexterm><programlisting>#define xmlSecTransformRsaSha224Id              xmlSecTransformRsaSha224GetKlass()
</programlisting>
<para>
The RSA-SHA224 signature transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformRsaSha224GetKlass" role="function">
<title>xmlSecTransformRsaSha224GetKlass ()</title>
<indexterm zone="xmlSecTransformRsaSha224GetKlass"><primary sortas="xmlSecTransformRsaSha224GetKlass">xmlSecTransformRsaSha224GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformRsaSha224GetKlass    (void);</programlisting>
<para>
The RSA-SHA224 signature transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> RSA-SHA224 signature transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformRsaSha256Id" role="macro">
<title>xmlSecTransformRsaSha256Id</title>
<indexterm zone="xmlSecTransformRsaSha256Id"><primary sortas="xmlSecTransformRsaSha256Id">xmlSecTransformRsaSha256Id</primary></indexterm><programlisting>#define xmlSecTransformRsaSha256Id              xmlSecTransformRsaSha256GetKlass()
</programlisting>
<para>
The RSA-SHA256 signature transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformRsaSha256GetKlass" role="function">
<title>xmlSecTransformRsaSha256GetKlass ()</title>
<indexterm zone="xmlSecTransformRsaSha256GetKlass"><primary sortas="xmlSecTransformRsaSha256GetKlass">xmlSecTransformRsaSha256GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformRsaSha256GetKlass    (void);</programlisting>
<para>
The RSA-SHA256 signature transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> RSA-SHA256 signature transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformRsaSha384Id" role="macro">
<title>xmlSecTransformRsaSha384Id</title>
<indexterm zone="xmlSecTransformRsaSha384Id"><primary sortas="xmlSecTransformRsaSha384Id">xmlSecTransformRsaSha384Id</primary></indexterm><programlisting>#define xmlSecTransformRsaSha384Id              xmlSecTransformRsaSha384GetKlass()
</programlisting>
<para>
The RSA-SHA384 signature transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformRsaSha384GetKlass" role="function">
<title>xmlSecTransformRsaSha384GetKlass ()</title>
<indexterm zone="xmlSecTransformRsaSha384GetKlass"><primary sortas="xmlSecTransformRsaSha384GetKlass">xmlSecTransformRsaSha384GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformRsaSha384GetKlass    (void);</programlisting>
<para>
The RSA-SHA384 signature transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> RSA-SHA384 signature transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformRsaSha512Id" role="macro">
<title>xmlSecTransformRsaSha512Id</title>
<indexterm zone="xmlSecTransformRsaSha512Id"><primary sortas="xmlSecTransformRsaSha512Id">xmlSecTransformRsaSha512Id</primary></indexterm><programlisting>#define xmlSecTransformRsaSha512Id              xmlSecTransformRsaSha512GetKlass()
</programlisting>
<para>
The RSA-SHA512 signature transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformRsaSha512GetKlass" role="function">
<title>xmlSecTransformRsaSha512GetKlass ()</title>
<indexterm zone="xmlSecTransformRsaSha512GetKlass"><primary sortas="xmlSecTransformRsaSha512GetKlass">xmlSecTransformRsaSha512GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformRsaSha512GetKlass    (void);</programlisting>
<para>
The RSA-SHA512 signature transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> RSA-SHA512 signature transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformRsaPkcs1Id" role="macro">
<title>xmlSecTransformRsaPkcs1Id</title>
<indexterm zone="xmlSecTransformRsaPkcs1Id"><primary sortas="xmlSecTransformRsaPkcs1Id">xmlSecTransformRsaPkcs1Id</primary></indexterm><programlisting>#define xmlSecTransformRsaPkcs1Id               xmlSecTransformRsaPkcs1GetKlass()
</programlisting>
<para>
The RSA PKCS1 key transport transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformRsaPkcs1GetKlass" role="function">
<title>xmlSecTransformRsaPkcs1GetKlass ()</title>
<indexterm zone="xmlSecTransformRsaPkcs1GetKlass"><primary sortas="xmlSecTransformRsaPkcs1GetKlass">xmlSecTransformRsaPkcs1GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformRsaPkcs1GetKlass     (void);</programlisting>
<para>
The RSA-PKCS1 key transport transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> RSA-PKCS1 key transport transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformRsaOaepId" role="macro">
<title>xmlSecTransformRsaOaepId</title>
<indexterm zone="xmlSecTransformRsaOaepId"><primary sortas="xmlSecTransformRsaOaepId">xmlSecTransformRsaOaepId</primary></indexterm><programlisting>#define xmlSecTransformRsaOaepId                xmlSecTransformRsaOaepGetKlass()
</programlisting>
<para>
The RSA PKCS1 key transport transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformRsaOaepGetKlass" role="function">
<title>xmlSecTransformRsaOaepGetKlass ()</title>
<indexterm zone="xmlSecTransformRsaOaepGetKlass"><primary sortas="xmlSecTransformRsaOaepGetKlass">xmlSecTransformRsaOaepGetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformRsaOaepGetKlass      (void);</programlisting>
<para>
The RSA-OAEP key transport transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> RSA-OAEP key transport transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformGostR3411-94Id" role="macro">
<title>xmlSecTransformGostR3411_94Id</title>
<indexterm zone="xmlSecTransformGostR3411-94Id"><primary sortas="xmlSecTransformGostR3411_94Id">xmlSecTransformGostR3411_94Id</primary></indexterm><programlisting>#define xmlSecTransformGostR3411_94Id                   xmlSecTransformGostR3411_94GetKlass()
</programlisting>
<para>
The GOSTR3411_94 digest transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformGostR3411-94GetKlass" role="function">
<title>xmlSecTransformGostR3411_94GetKlass ()</title>
<indexterm zone="xmlSecTransformGostR3411-94GetKlass"><primary sortas="xmlSecTransformGostR3411_94GetKlass">xmlSecTransformGostR3411_94GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformGostR3411_94GetKlass (void);</programlisting>
<para>
GOSTR3411_94 digest transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to GOSTR3411_94 digest transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformSha1Id" role="macro">
<title>xmlSecTransformSha1Id</title>
<indexterm zone="xmlSecTransformSha1Id"><primary sortas="xmlSecTransformSha1Id">xmlSecTransformSha1Id</primary></indexterm><programlisting>#define xmlSecTransformSha1Id                   xmlSecTransformSha1GetKlass()
</programlisting>
<para>
The SHA1 digest transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformSha1GetKlass" role="function">
<title>xmlSecTransformSha1GetKlass ()</title>
<indexterm zone="xmlSecTransformSha1GetKlass"><primary sortas="xmlSecTransformSha1GetKlass">xmlSecTransformSha1GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformSha1GetKlass         (void);</programlisting>
<para>
SHA-1 digest transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to SHA-1 digest transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformSha224Id" role="macro">
<title>xmlSecTransformSha224Id</title>
<indexterm zone="xmlSecTransformSha224Id"><primary sortas="xmlSecTransformSha224Id">xmlSecTransformSha224Id</primary></indexterm><programlisting>#define xmlSecTransformSha224Id                 xmlSecTransformSha224GetKlass()
</programlisting>
<para>
The SHA224 digest transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformSha224GetKlass" role="function">
<title>xmlSecTransformSha224GetKlass ()</title>
<indexterm zone="xmlSecTransformSha224GetKlass"><primary sortas="xmlSecTransformSha224GetKlass">xmlSecTransformSha224GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformSha224GetKlass       (void);</programlisting>
<para>
SHA224 digest transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to SHA224 digest transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformSha256Id" role="macro">
<title>xmlSecTransformSha256Id</title>
<indexterm zone="xmlSecTransformSha256Id"><primary sortas="xmlSecTransformSha256Id">xmlSecTransformSha256Id</primary></indexterm><programlisting>#define xmlSecTransformSha256Id                 xmlSecTransformSha256GetKlass()
</programlisting>
<para>
The SHA256 digest transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformSha256GetKlass" role="function">
<title>xmlSecTransformSha256GetKlass ()</title>
<indexterm zone="xmlSecTransformSha256GetKlass"><primary sortas="xmlSecTransformSha256GetKlass">xmlSecTransformSha256GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformSha256GetKlass       (void);</programlisting>
<para>
SHA256 digest transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to SHA256 digest transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformSha384Id" role="macro">
<title>xmlSecTransformSha384Id</title>
<indexterm zone="xmlSecTransformSha384Id"><primary sortas="xmlSecTransformSha384Id">xmlSecTransformSha384Id</primary></indexterm><programlisting>#define xmlSecTransformSha384Id                 xmlSecTransformSha384GetKlass()
</programlisting>
<para>
The SHA384 digest transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformSha384GetKlass" role="function">
<title>xmlSecTransformSha384GetKlass ()</title>
<indexterm zone="xmlSecTransformSha384GetKlass"><primary sortas="xmlSecTransformSha384GetKlass">xmlSecTransformSha384GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformSha384GetKlass       (void);</programlisting>
<para>
SHA384 digest transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to SHA384 digest transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecTransformSha512Id" role="macro">
<title>xmlSecTransformSha512Id</title>
<indexterm zone="xmlSecTransformSha512Id"><primary sortas="xmlSecTransformSha512Id">xmlSecTransformSha512Id</primary></indexterm><programlisting>#define xmlSecTransformSha512Id                 xmlSecTransformSha512GetKlass()
</programlisting>
<para>
The SHA512 digest transform klass.</para>
<para>
</para></refsect2>
<refsect2 id="xmlSecTransformSha512GetKlass" role="function">
<title>xmlSecTransformSha512GetKlass ()</title>
<indexterm zone="xmlSecTransformSha512GetKlass"><primary sortas="xmlSecTransformSha512GetKlass">xmlSecTransformSha512GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link>   xmlSecTransformSha512GetKlass       (void);</programlisting>
<para>
SHA512 digest transform klass.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to SHA512 digest transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecCryptoAppInit" role="function">
<title>xmlSecCryptoAppInit ()</title>
<indexterm zone="xmlSecCryptoAppInit"><primary sortas="xmlSecCryptoAppInit">xmlSecCryptoAppInit</primary></indexterm><programlisting><link linkend="int">int</link>                 xmlSecCryptoAppInit                 (const <link linkend="char">char</link> *config);</programlisting>
<para>
General crypto engine initialization. This function is used
by XMLSec command line utility and called before
<parameter>xmlSecInit</parameter> function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>config</parameter>&#160;:</term>
<listitem><simpara>             the path to crypto library configuration.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecCryptoAppShutdown" role="function">
<title>xmlSecCryptoAppShutdown ()</title>
<indexterm zone="xmlSecCryptoAppShutdown"><primary sortas="xmlSecCryptoAppShutdown">xmlSecCryptoAppShutdown</primary></indexterm><programlisting><link linkend="int">int</link>                 xmlSecCryptoAppShutdown             (void);</programlisting>
<para>
General crypto engine shutdown. This function is used
by XMLSec command line utility and called after
<parameter>xmlSecShutdown</parameter> function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecCryptoAppDefaultKeysMngrInit" role="function">
<title>xmlSecCryptoAppDefaultKeysMngrInit ()</title>
<indexterm zone="xmlSecCryptoAppDefaultKeysMngrInit"><primary sortas="xmlSecCryptoAppDefaultKeysMngrInit">xmlSecCryptoAppDefaultKeysMngrInit</primary></indexterm><programlisting><link linkend="int">int</link>                 xmlSecCryptoAppDefaultKeysMngrInit  (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr);</programlisting>
<para>
Initializes <parameter>mngr</parameter> with simple keys store <link linkend="xmlSecSimpleKeysStoreId"><type>xmlSecSimpleKeysStoreId</type></link>
and a default crypto key data stores.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&#160;:</term>
<listitem><simpara>               the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecCryptoAppDefaultKeysMngrAdoptKey" role="function">
<title>xmlSecCryptoAppDefaultKeysMngrAdoptKey ()</title>
<indexterm zone="xmlSecCryptoAppDefaultKeysMngrAdoptKey"><primary sortas="xmlSecCryptoAppDefaultKeysMngrAdoptKey">xmlSecCryptoAppDefaultKeysMngrAdoptKey</primary></indexterm><programlisting><link linkend="int">int</link>                 xmlSecCryptoAppDefaultKeysMngrAdoptKey
                                                        (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                                         <link linkend="xmlSecKey">xmlSecKeyPtr</link> key);</programlisting>
<para>
Adds <parameter>key</parameter> to the keys manager <parameter>mngr</parameter> created with <link linkend="xmlSecCryptoAppDefaultKeysMngrInit"><type>xmlSecCryptoAppDefaultKeysMngrInit</type></link>
function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&#160;:</term>
<listitem><simpara>               the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>                the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecCryptoAppDefaultKeysMngrLoad" role="function">
<title>xmlSecCryptoAppDefaultKeysMngrLoad ()</title>
<indexterm zone="xmlSecCryptoAppDefaultKeysMngrLoad"><primary sortas="xmlSecCryptoAppDefaultKeysMngrLoad">xmlSecCryptoAppDefaultKeysMngrLoad</primary></indexterm><programlisting><link linkend="int">int</link>                 xmlSecCryptoAppDefaultKeysMngrLoad  (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                                         const <link linkend="char">char</link> *uri);</programlisting>
<para>
Loads XML keys file from <parameter>uri</parameter> to the keys manager <parameter>mngr</parameter> created
with <link linkend="xmlSecCryptoAppDefaultKeysMngrInit"><type>xmlSecCryptoAppDefaultKeysMngrInit</type></link> function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&#160;:</term>
<listitem><simpara>               the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri</parameter>&#160;:</term>
<listitem><simpara>                the uri.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecCryptoAppDefaultKeysMngrSave" role="function">
<title>xmlSecCryptoAppDefaultKeysMngrSave ()</title>
<indexterm zone="xmlSecCryptoAppDefaultKeysMngrSave"><primary sortas="xmlSecCryptoAppDefaultKeysMngrSave">xmlSecCryptoAppDefaultKeysMngrSave</primary></indexterm><programlisting><link linkend="int">int</link>                 xmlSecCryptoAppDefaultKeysMngrSave  (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                                         const <link linkend="char">char</link> *filename,
                                                         <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);</programlisting>
<para>
Saves keys from <parameter>mngr</parameter> to  XML keys file.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&#160;:</term>
<listitem><simpara>               the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara>           the destination filename.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>               the type of keys to save (public/private/symmetric).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecCryptoAppKeysMngrCertLoad" role="function">
<title>xmlSecCryptoAppKeysMngrCertLoad ()</title>
<indexterm zone="xmlSecCryptoAppKeysMngrCertLoad"><primary sortas="xmlSecCryptoAppKeysMngrCertLoad">xmlSecCryptoAppKeysMngrCertLoad</primary></indexterm><programlisting><link linkend="int">int</link>                 xmlSecCryptoAppKeysMngrCertLoad     (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                                         const <link linkend="char">char</link> *filename,
                                                         <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                                         <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);</programlisting>
<para>
Reads cert from <parameter>filename</parameter> and adds to the list of trusted or known
untrusted certs in <parameter>store</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&#160;:</term>
<listitem><simpara>               the keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara>           the certificate file.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara>             the certificate file format.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>               the flag that indicates is the certificate in <parameter>filename</parameter>
                     trusted or not.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecCryptoAppKeysMngrCertLoadMemory" role="function">
<title>xmlSecCryptoAppKeysMngrCertLoadMemory ()</title>
<indexterm zone="xmlSecCryptoAppKeysMngrCertLoadMemory"><primary sortas="xmlSecCryptoAppKeysMngrCertLoadMemory">xmlSecCryptoAppKeysMngrCertLoadMemory</primary></indexterm><programlisting><link linkend="int">int</link>                 xmlSecCryptoAppKeysMngrCertLoadMemory
                                                        (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                                         const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                                         <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                                         <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                                         <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);</programlisting>
<para>
Reads cert from binary buffer <parameter>data</parameter> and adds to the list of trusted or known
untrusted certs in <parameter>store</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&#160;:</term>
<listitem><simpara>               the keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>               the certificate binary data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataSize</parameter>&#160;:</term>
<listitem><simpara>           the certificate binary data size.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara>             the certificate file format.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>               the flag that indicates is the certificate trusted or not.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecCryptoAppKeyLoad" role="function">
<title>xmlSecCryptoAppKeyLoad ()</title>
<indexterm zone="xmlSecCryptoAppKeyLoad"><primary sortas="xmlSecCryptoAppKeyLoad">xmlSecCryptoAppKeyLoad</primary></indexterm><programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link>        xmlSecCryptoAppKeyLoad              (const <link linkend="char">char</link> *filename,
                                                         <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                                         const <link linkend="char">char</link> *pwd,
                                                         <link linkend="void">void</link> *pwdCallback,
                                                         <link linkend="void">void</link> *pwdCallbackCtx);</programlisting>
<para>
Reads key from the a file.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara>           the key filename.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara>             the key file format.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwd</parameter>&#160;:</term>
<listitem><simpara>                the key file password.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallback</parameter>&#160;:</term>
<listitem><simpara>        the key password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallbackCtx</parameter>&#160;:</term>
<listitem><simpara>     the user context for password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to the key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecCryptoAppKeyLoadMemory" role="function">
<title>xmlSecCryptoAppKeyLoadMemory ()</title>
<indexterm zone="xmlSecCryptoAppKeyLoadMemory"><primary sortas="xmlSecCryptoAppKeyLoadMemory">xmlSecCryptoAppKeyLoadMemory</primary></indexterm><programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link>        xmlSecCryptoAppKeyLoadMemory        (const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                                         <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                                         <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                                         const <link linkend="char">char</link> *pwd,
                                                         <link linkend="void">void</link> *pwdCallback,
                                                         <link linkend="void">void</link> *pwdCallbackCtx);</programlisting>
<para>
Reads key from the memory buffer.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>               the binary key data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataSize</parameter>&#160;:</term>
<listitem><simpara>           the size of binary key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara>             the key file format.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwd</parameter>&#160;:</term>
<listitem><simpara>                the key file password.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallback</parameter>&#160;:</term>
<listitem><simpara>        the key password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallbackCtx</parameter>&#160;:</term>
<listitem><simpara>     the user context for password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to the key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecCryptoAppPkcs12Load" role="function">
<title>xmlSecCryptoAppPkcs12Load ()</title>
<indexterm zone="xmlSecCryptoAppPkcs12Load"><primary sortas="xmlSecCryptoAppPkcs12Load">xmlSecCryptoAppPkcs12Load</primary></indexterm><programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link>        xmlSecCryptoAppPkcs12Load           (const <link linkend="char">char</link> *filename,
                                                         const <link linkend="char">char</link> *pwd,
                                                         <link linkend="void">void</link> *pwdCallback,
                                                         <link linkend="void">void</link> *pwdCallbackCtx);</programlisting>
<para>
Reads key and all associated certificates from the PKCS12 file.
For uniformity, call xmlSecCryptoAppKeyLoad instead of this function. Pass
in format=xmlSecKeyDataFormatPkcs12.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara>           the PKCS12 key filename.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwd</parameter>&#160;:</term>
<listitem><simpara>                the PKCS12 file password.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallback</parameter>&#160;:</term>
<listitem><simpara>        the password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallbackCtx</parameter>&#160;:</term>
<listitem><simpara>     the user context for password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to the key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecCryptoAppPkcs12LoadMemory" role="function">
<title>xmlSecCryptoAppPkcs12LoadMemory ()</title>
<indexterm zone="xmlSecCryptoAppPkcs12LoadMemory"><primary sortas="xmlSecCryptoAppPkcs12LoadMemory">xmlSecCryptoAppPkcs12LoadMemory</primary></indexterm><programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link>        xmlSecCryptoAppPkcs12LoadMemory     (const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                                         <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                                         const <link linkend="char">char</link> *pwd,
                                                         <link linkend="void">void</link> *pwdCallback,
                                                         <link linkend="void">void</link> *pwdCallbackCtx);</programlisting>
<para>
Reads key and all associated certificates from the PKCS12 data in memory buffer.
For uniformity, call xmlSecCryptoAppKeyLoadMemory instead of this function. Pass
in format=xmlSecKeyDataFormatPkcs12.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>               the PKCS12 binary data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataSize</parameter>&#160;:</term>
<listitem><simpara>           the PKCS12 binary data size.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwd</parameter>&#160;:</term>
<listitem><simpara>                the PKCS12 file password.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallback</parameter>&#160;:</term>
<listitem><simpara>        the password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallbackCtx</parameter>&#160;:</term>
<listitem><simpara>     the user context for password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to the key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecCryptoAppKeyCertLoad" role="function">
<title>xmlSecCryptoAppKeyCertLoad ()</title>
<indexterm zone="xmlSecCryptoAppKeyCertLoad"><primary sortas="xmlSecCryptoAppKeyCertLoad">xmlSecCryptoAppKeyCertLoad</primary></indexterm><programlisting><link linkend="int">int</link>                 xmlSecCryptoAppKeyCertLoad          (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                                         const <link linkend="char">char</link> *filename,
                                                         <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format);</programlisting>
<para>
Reads the certificate from $<parameter>filename</parameter> and adds it to key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>                the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara>           the certificate filename.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara>             the certificate file format.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecCryptoAppKeyCertLoadMemory" role="function">
<title>xmlSecCryptoAppKeyCertLoadMemory ()</title>
<indexterm zone="xmlSecCryptoAppKeyCertLoadMemory"><primary sortas="xmlSecCryptoAppKeyCertLoadMemory">xmlSecCryptoAppKeyCertLoadMemory</primary></indexterm><programlisting><link linkend="int">int</link>                 xmlSecCryptoAppKeyCertLoadMemory    (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                                         const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                                         <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                                         <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format);</programlisting>
<para>
Reads the certificate from memory buffer and adds it to key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>                the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>               the certificate binary data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataSize</parameter>&#160;:</term>
<listitem><simpara>           the certificate binary data size.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara>             the certificate file format.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecCryptoAppGetDefaultPwdCallback" role="function">
<title>xmlSecCryptoAppGetDefaultPwdCallback ()</title>
<indexterm zone="xmlSecCryptoAppGetDefaultPwdCallback"><primary sortas="xmlSecCryptoAppGetDefaultPwdCallback">xmlSecCryptoAppGetDefaultPwdCallback</primary></indexterm><programlisting><link linkend="void">void</link>*               xmlSecCryptoAppGetDefaultPwdCallback
                                                        (void);</programlisting>
<para>
Gets default password callback.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> default password callback.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
